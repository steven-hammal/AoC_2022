#!markdown

# Advent of Code Day 3: Rucksack Items

### Part 1

* Read in strings of items
* Split exactly im half
* Find chars duplicated between the two halves
* Map duplicates to their score
* Find sum of all duplicate priority scores

### Part 2

* Group all lines into sets of three
* Find the only duplicated char in each set
* Find the sum of the priority scores of the duplicated char from each set

#!markdown

## Solution Functions

#!csharp

using System.IO;

// Create a utils class to avoid having to duplicate this every day
public List<string> GetRucksacksFromFile(string filename)
{
    return File.ReadLines(filename).ToList();
}

public int GetCharPriorityScoreFrom(char item)
{
    return  Char.IsUpper(item) ? (item & 0b11111) + 26 : item & 0b11111;
}

public int GetDuplicateScoreFrom(string rucksack)
{
    // Requirements state all compartments contain equal items per rucksack so
    // assumption is made that we do not have to handkle odd numbered rucksack totals
    var compartment1 = rucksack.Substring(0, (int)(rucksack.Length / 2));
    var compartment2 = rucksack.Substring((int)(rucksack.Length / 2), (int)(rucksack.Length / 2));

    var duplicatedItems = new List<char>();
    
    foreach (char item in compartment1)
    {
        if(compartment2.Contains(item))
        {
            duplicatedItems.Add(item);
        }
    }

    return duplicatedItems.Distinct().Select(duplicatedItem => GetCharPriorityScoreFrom(duplicatedItem)).Sum();
}

public int GetPriorityTotalFrom(List<string> rucksacks)
{
    return rucksacks.Select(rucksack => GetDuplicateScoreFrom(rucksack)).Sum();
}

public int GetGroupBadgePriorityScoreFrom(List<string> rucksacks)
{
    var groups = rucksacks.Chunk(3);

    return groups.Select(group => GetGroupBadgeScoreFor(group)).Sum();
}

public int GetGroupBadgeScoreFor(List<string> group)
{
    var groupRucksacksAsChars = group.Select(rucksack => rucksack.ToCharArray()).ToArray();

    var repeatedItemsInFirstTwoRucksacks = groupRucksacksAsChars[0].Intersect(groupRucksacksAsChars[1]);
    var totalRepeatedItems = repeatedItemsInFirstTwoRucksacks.Intersect(groupRucksacksAsChars[2]).ToList();

    return GetCharPriorityScoreFrom(totalRepeatedItems.SingleOrDefault());
}

// TODO: If ever have time, refactor this to use char[] for part 1 and generalise the intersect to accept any number of groups,
// then we can use the same function to solve both parts

#!markdown

## Part 1 Test Cases

#!csharp

var testInput1 = new List<string> { "vJrwpWtwJgWrhcsFMMfFFhFp", "jqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL", "PmmdzqPrVvPwwTWBwg" };
var testResult1 = GetPriorityTotalFrom(testInput1);

Console.WriteLine(testResult1 == 96);

#!markdown

## Part 1 Answer

#!csharp

var rucksacks = GetRucksacksFromFile("day_3_input.txt");
var answer = GetPriorityTotalFrom(rucksacks);

Console.WriteLine(answer);

#!markdown

## Part 2 Test Cases

#!csharp

var testInput1 = new List<string> { "vJrwpWtwJgWrhcsFMMfFFhFp", "jqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL", "PmmdzqPrVvPwwTWBwg" };
var testResult1 = GetGroupBadgePriorityScoreFrom(testInput1);

Console.WriteLine(testResult1 == 18);

var testInput2 = new List<string> { "wMqvLMZHhHMvwLHjbvcjnnSBnvTQFn", "ttgJtRGJQctTZtZT", "CrZsJsPPZsGzwwsLwLmpwMDw" };
var testResult2 = GetGroupBadgePriorityScoreFrom(testInput2);

Console.WriteLine(testResult2 == 52);

var testInput3 = testInput1.Concat(testInput2).ToList();
var testResult3 = GetGroupBadgePriorityScoreFrom(testInput3);

Console.WriteLine(testResult1 == 18);

#!markdown

## Part 2 Answer

#!csharp

var rucksacks = GetRucksacksFromFile("day_3_input.txt");
var answer = GetGroupBadgePriorityScoreFrom(rucksacks);

Console.WriteLine(answer);
