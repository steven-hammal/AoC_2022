#!markdown

# Advent of Code Day 2: Rock, Paper, Scissors

We are given an input representing your proposed strategy in the game of the form

```
A Y
B X
C Z
```

A, B, C are your oponent's moves, X, Y, Z are yours.  The strategy attempts lead to your victory without winning every round.  Scoring is dependent on the outcome of the round **and** which move you play:

```
A | X = 1     Win  = 6
B | Y = 2     Lose = 0
C | Z = 3     Draw = 3
```

Given an input, calculate your total score if the strategy played out exactly as give.

#!markdown

## Solution Functions

#!csharp

using System.IO;

enum Moves
{
    Rock = 1,
    A = Rock,
    X = Rock,
    Paper = 2,
    B = Paper,
    Y = Paper,
    Scissors = 3,
    C = Scissors,
    Z = Scissors    
}

enum Scores
{
    Win = 6,
    Draw = 3,
    Loss = 0
}


public interface IRockPaperScissorsScorer
{
    int GetTotalScoreFrom(List<string> rounds);
}

public class BaseRockPaperScissorsScorer
{
    public List<string> GetRoundsFromFile(string filename)
    {
        return File.ReadLines(filename).ToList();
    }

    public int ScoreRound((int, int) round)
    {
        var score = DetemrineScore(round.Item1, round.Item2);

        return round.Item2 + score;
    }

    public int DetemrineScore(int opponentMove, int playerMove)
    {
        var winningPlayer = (3 + opponentMove - playerMove) % 3;

        return winningPlayer == 2 ? (int) Scores.Win : winningPlayer == 1 ? (int) Scores.Loss : (int) Scores.Draw;
    }    
}

public class NaiveRockPaperScissorsScorer : BaseRockPaperScissorsScorer, IRockPaperScissorsScorer
{
    public int GetTotalScoreFrom(List<string> rounds)
    {
        var roundsMoves = rounds.Select(roundString => GetNaiveRoundMovesFrom(roundString));

        return roundsMoves.Select(round => ScoreRound((round))).Sum();
    }
    
    private (int, int) GetNaiveRoundMovesFrom(string line)
    {
        var move = line.Split(" ");

        try
        {
            // Least clean code here.  Converts the char moves into their point values
            return ((int)(Moves)Enum.Parse(typeof(Moves), move[0]), (int)(Moves)Enum.Parse(typeof(Moves), move[1]));
        }
        catch(ArgumentException exception)
        {
            Console.WriteLine(exception.Message);
            throw exception;
        }
    }   
}

public class AdvancedRockPaperScissorsScorer : BaseRockPaperScissorsScorer, IRockPaperScissorsScorer
{
    public int GetTotalScoreFrom(List<string> rounds)
    {
        var roundsMoves = rounds.Select(roundString => GetAdvancedRoundMovesFrom(roundString));

        return roundsMoves.Select(round => ScoreRound((round))).Sum();
    }

    private (int, int) GetAdvancedRoundMovesFrom(string line)
    {
            var moveAndStrategy = line.Split(" ");

            try
            {
                var opponentMove = (int)(Moves)Enum.Parse(typeof(Moves), moveAndStrategy[0]);
                var playerMove = DetermineMoveFrom(opponentMove, moveAndStrategy[1]);

                return (opponentMove, playerMove);
            }
            catch(ArgumentException exception)
            {
                Console.WriteLine(exception.Message);
                throw exception;
            }
    }

    private int DetermineMoveFrom(int opponentMove, string strategy)
    {
        // X = lose, Y = draw, Z = win
        if(strategy == "X")
        {
            if(opponentMove == 1)
            {
                return 3;
            }

            if(opponentMove == 2)
            {
                return 1;
            }

            return 2;
        }
        
        if(strategy == "Z")
        {
            if(opponentMove == 1)
            {
                return 2;
            }

            if(opponentMove == 2)
            {
                return 3;
            }

            return 1;  
        }

        return opponentMove;
              
    }
}

#!markdown

## Part 1 Test Cases

#!csharp

var sut = new NaiveRockPaperScissorsScorer();

// 3 wins
var testCase1 = new List<string> { "A Y", "B Z", "C X" };
var testResult1 = sut.GetTotalScoreFrom(testCase1);

Console.WriteLine(testResult1 == 24);

// 3 loses
var testCase2 = new List<string> { "B X", "C Y", "A Z" };
var testResult2 = sut.GetTotalScoreFrom(testCase2);

Console.WriteLine(testResult2 == 6);

// 1 win, 1 loss, 1 draw
var testCase3 = new List<string> { "A Y", "A Z", "C Z" };
var testResult3 = sut.GetTotalScoreFrom(testCase3);

Console.WriteLine(testResult3 == 17);

#!markdown

## Part 1 Answer

#!csharp

var scorer = new NaiveRockPaperScissorsScorer();

var strategyRounds = scorer.GetRoundsFromFile("day_2_input.txt");
var answer = scorer.GetTotalScoreFrom(strategyRounds);

Console.WriteLine(answer);

#!markdown

## Part 2 Test Cases

#!csharp

var sut = new AdvancedRockPaperScissorsScorer();

// 1 draw, 1 loss, 1 win
var testCase1 = new List<string> { "A Y", "B X", "C Z" };
var testResult1 = sut.GetTotalScoreFrom(testCase1);

Console.WriteLine(testResult1 == 12);

#!markdown

## Part 2 Answer

#!csharp

var scorer = new AdvancedRockPaperScissorsScorer();

var strategyRounds = scorer.GetRoundsFromFile("day_2_input.txt");
var answer = scorer.GetTotalScoreFrom(strategyRounds);

Console.WriteLine(answer);
