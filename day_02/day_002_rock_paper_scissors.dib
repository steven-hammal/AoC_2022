#!markdown

# Advent of Code Day 2: Rock, Paper, Scissors

We are given an input representing your proposed strategy in the game of the form

```
A Y
B X
C Z
```

A, B, C are your oponent's moves, X, Y, Z are yours.  The strategy attempts lead to your victory without winning every round.  Scoring is dependent on the outcome of the round **and** which move you play:

```
A | X = 1     Win  = 6
B | Y = 2     Lose = 0
C | Z = 3     Draw = 3
```

Given an input, calculate your total score if the strategy played out exactly as give.

#!markdown

## Solution Functions

#!csharp

using System.IO;

enum Moves
{
    Rock = 1,
    A = Rock,
    X = Rock,
    Paper = 2,
    B = Paper,
    Y = Paper,
    Scissors = 3,
    C = Scissors,
    Z = Scissors    
}

enum Scores
{
    Win = 6,
    Draw = 3,
    Loss = 0
}

public List<(int, int)> GetRoundsFromFile(string filename)
{
    var roundStrings = File.ReadLines(filename);

    return roundStrings.Select(round => GetRoundMovesFrom(round)).ToList();
}

public (int, int) GetRoundMovesFrom(string line)
{
    var move = line.Split(" ");

    try
    {
        // Least clean code here.  Converts the char moves into their point values
        return ((int)(Moves)Enum.Parse(typeof(Moves), move[0]), (int)(Moves)Enum.Parse(typeof(Moves), move[1]));
    }
    catch(ArgumentException exception)
    {
        Console.WriteLine(exception.Message);
        throw exception;
    }
}

public int ScoreRound((int, int) round)
{
    var score = detemrineScore(round.Item1, round.Item2);

    return round.Item2 + score;
}

public int detemrineScore(int opponentMove, int playerMove)
{
    var winningPlayer = (3 + opponentMove - playerMove) % 3;

    return winningPlayer == 2 ? (int) Scores.Win : winningPlayer == 1 ? (int) Scores.Loss : (int) Scores.Draw;
}

public int GetTotalScoreFrom(List<(int, int)> rounds)
{
    return rounds.Select(round => ScoreRound((round))).Sum();
}

#!markdown

## Part 1 Test Cases

#!csharp

// 3 wins
var testCase1 = new List<(int, int)> { (1,2), (2,3), (3,1) };
var testResult1 = GetTotalScoreFrom(testCase1);

Console.WriteLine(testResult1 == 24);

// 3 loses
var testCase2 = new List<(int, int)> { (2,1), (3,2), (1,3) };
var testResult2 = GetTotalScoreFrom(testCase2);

Console.WriteLine(testResult2 == 6);

// 1 win, 1 loss, 1 draw
var testCase3 = new List<(int, int)> { (1,2), (1,3), (3,3) };
var testResult3 = GetTotalScoreFrom(testCase3);

Console.WriteLine(testResult3 == 17);

#!markdown

## Part 1 Answer

#!csharp

var strategyRounds = GetRoundsFromFile("day_2_input.txt");
var answer = GetTotalScoreFrom(strategyRounds);

Console.WriteLine(answer);

#!markdown

## Part 2 Test Cases

#!markdown

## Part 2 Answer
